import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from matplotlib import rcParams
# 设置中文字体，以避免乱码
rcParams['font.sans-serif'] = ['Microsoft YaHei']  # 设置中文字体为Microsoft YaHei
rcParams['axes.unicode_minus'] = False  # 显示负号
# 读取图像并转换为灰度图像
img_path = r'D:\2\9a01751f08e660c380892628c01201b3.jpeg'
image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

# 展平图像为二维数据，行数是图像的像素行数，列数是图像的像素列数
original_shape = image.shape
image_flattened = image.reshape(-1, original_shape[0]).T  # 转换为(M, N)形式

# 进行PCA处理
n_components = min(original_shape[0], 50)  # 确保n_components <= min(行数, 列数)
pca = PCA(n_components=n_components)
image_pca = pca.fit_transform(image_flattened)

# 恢复图像
image_reconstructed = pca.inverse_transform(image_pca).T.reshape(original_shape)

# 显示结果
plt.figure(figsize=(12, 6))

# 显示原图
plt.subplot(1, 2, 1), plt.imshow(image, cmap='gray'), plt.title('原始图像')
plt.axis('off')

# 显示恢复后的图像
plt.subplot(1, 2, 2), plt.imshow(image_reconstructed, cmap='gray'), plt.title('PCA恢复图像')
plt.axis('off')

plt.show()

# 计算恢复图与原图之间的误差
mse = np.mean((image - image_reconstructed) ** 2)
print(f"恢复图与原图之间的均方误差（MSE）: {mse}")
