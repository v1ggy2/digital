import cv2
import numpy as np
import matplotlib.pyplot as plt

# 读取图像
img_path = r'D:\2\2024-10-24 102920.jpg'
img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

# 检查图像是否成功加载
if img is None:
    print("图像未能成功加载，请检查文件格式。")
else:
    # 定义Roberts算子的卷积核
    kernel_x = np.array([[1, 0], [0, -1]], dtype=np.float32)
    kernel_y = np.array([[0, 1], [-1, 0]], dtype=np.float32)

    # 添加边界以保持输出图像大小一致
    img_padded = cv2.copyMakeBorder(img, 1, 0, 1, 0, cv2.BORDER_REPLICATE)

    # 使用卷积核进行卷积
    gradient_x = cv2.filter2D(img_padded, -1, kernel_x)
    gradient_y = cv2.filter2D(img_padded, -1, kernel_y)

    # 计算边缘强度
    gradient_x_abs = cv2.convertScaleAbs(gradient_x)
    gradient_y_abs = cv2.convertScaleAbs(gradient_y)

    # 计算边缘强度的绝对值
    edges = cv2.addWeighted(gradient_x_abs, 0.5, gradient_y_abs, 0.5, 0)

    # 显示结果
    plt.figure(figsize=(10, 5))
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体
    plt.rcParams['axes.unicode_minus'] = False  # 正确显示负号
    plt.subplot(1, 3, 1)
    plt.imshow(img, cmap='gray')
    plt.title('原图')
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.imshow(gradient_x_abs, cmap='gray')
    plt.title('Gx（水平边缘）')
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.imshow(gradient_y_abs, cmap='gray')
    plt.title('Gy（垂直边缘）')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(5, 5))
    plt.imshow(edges, cmap='gray')
    plt.title('边缘检测（Roberts算子）')
    plt.axis('off')
    plt.show()
